
import os
os.environ["AOC_SESSION"] = "53616c7465645f5feb5f98622da494e1f359f67b2973c8f6a54ed362910e50e251d3f40a7189ffd45624f53a2c2e408b0039c07d21c2423c1ebce73b8d6b4bce"

import aocd
import re
from collections import deque

USE_TEST_DATA = 1
TEST_DATA = '....#..\n..###.#\n#...#.#\n.#...##\n#.###..\n##.#.##\n.#..#..'
REAL_DATA = '.##.#.#......###..######...##.##.#..#.#.#.#######.###.#####...#...#..#\n#...######.#.#.#.##....#..##.###.#..##.#..#.....##.....#....###.##.##.\n.##.#.##..#.....#...###..#...##.##...........#.#..###.###...####.##..#\n##.#.##.#.####......#####..#.....#..#....###..#..####.##.#.###....####\n.....#...#.######...###..#....##.#.####.###.#..###...#.#.#..###.##...#\n#.#...#.##.....#..#######..##.###.###.####.#.##..##........#.#####..#.\n.#..###..#.....#..##.....#..#.##....#....##..###..#####.#....##.#.#..#\n#..##.##.#.##.#..#.#.#.#..#.#.#..#.#...######.###.#..##.##...##.#.##.#\n.##....#....#..#..#.###.......##.#..###..#....#.####....##.#.##...###.\n.....#.###.#....##.....#...###...##.#.#.#.....###.#..#..##..#..##.#.##\n..#..####..#####.####..#...#####..###.#..###.#.#####.####..##...###...\n..#.#.#.##.##.#.##.###.....##...##...#....#...#...##...#.#..####.#.###\n.##.#..##..........##.#....###..##....##.#.##....##.##.##.#.#.###.##..\n..###....#.#.#.....#.##.#.....#####.#.#...##..#..##.#....##.....##....\n###..##.#.#.#...#.#..#.#.#.##.#.#.....#..##.##.....##.#.#.##..###..###\n#....#.#...#..##.###...###.#.#####...#.###...##.####..##.####.#..##..#\n##..#.#.#####.#..######..###.......#..##..#..#.#.###.###.#..#.#..###..\n..####.#.##.###.#...##.##.......#...#...##.#.##..#.#.#.#.#...#..#..###\n..#..##...#.#.#.#..#...###..#.....###.##.####.#..#.#..#.....##.##.#.##\n.#.##.####..#.#.#...#.#.##....###.#.##....###...###.#...#####.##.#.#..\n..##....###...#.#..######.##.#...#.##.##..#.#.##..#.######..#.#.#..##.\n..#.......#...##.#...##.##...#####...##..##.#.#.##...###...#.#..####.#\n#.##..#####.......#.#.#.####..##..##...####...#...###.....##..#.#....#\n..#...#####.#.#..##.#..#.#.#.####..##....######..##........##..#.#...#\n###....#..###..#.###.####...##..#..##..##.#..##.###....#.####.#....##.\n.#.##.###.#.#####.#.#.#.#...#.#.#....#####.###.#.##..#.....##.#..###..\n#.##..##.#.####....#..##.#.#####...#.##....####...##.##.#..##......#..\n.#..........####....#.#.###...#....#.#.##...#.#...#...#...##.#.......#\n..#.#...#..#..#...#.#..##..##.#.....#...##.##.##.###.##.#.###.##.#.#..\n..##..##..#.#..#..#...##.##......#.#..#.#..##..#.##.####...####..#.#.#\n###...#....#.##.....###...#..#.#.....#.#..###.#..#####..#.#.#..#.##...\n#.#..#.###..##.##.#.#######.#.#..#.....#.#...########..####.##.#.#####\n.#.###.....##..##...####.##.###.....###....#.#....##.#.###..###.##.#.#\n######.#....##..##.#.##.##.###.####.##.###..#..##...###.#....#.#.#....\n#..###...#####.....##..##.#.#....#.######.####....##..#..###...#.#.#..\n......#.###....#...##.##.###.#.#....##...#..#..#..####.#.#..#.###.#.#.\n.##........#...#########.##...##.#..##..#.#..#.##.####..##....###.####\n#.#.###.#....#.##.##.#...##..######..#.#..####..#.####.#...#..#.##..#.\n####..##...##..#.####.#.#.#.....##...###.#.#....##....##.###.##.....#.\n#.####..#....####.#.#.##.....##.#####.#.#.####.##...##..#####.....##..\n.##.##.....##..#.....##.###.##.###.#.#..##..####.###..##..##...##.#..#\n.....#...#.##.#.#.....#.#.#.#..######..#..#.##.#.#......#....#..#..###\n.#..#...##.#..#.###....#..##..###...##.##.#.#..##..##...#.#.##.###...#\n..#.#.#.####.#.####....#.#....#..###....#..#.##.#....##..#.#..###..##.\n.#..#.####..#.....##.######.#.##..##..#.##.##..##.#..##.#.####..#..##.\n####.#...##..########..#.#..#...#.#.#####.#..#.......##.###..###.###.#\n.###.###....#..#..###.....#.#.#.#...#.###.#.##.##.####.#.###..##..#..#\n...##.#.#.######..##..#.#.#..#.#.#....#.....#.#..##.#......##..#####.#\n#####.#.#.#.##..####.####.....##...#.#####...#.###..#...#...#######..#\n...####..##..##....####.........#.#.#.##.#..#.###...##..###..#...#...#\n.#..##...###.####.##.....#..#..#....#.#.#.#####.#...##....#####.####..\n###.#..##.#.#.##......#.##.####...#...#..##..#..####..###...##.#..####\n####.#...#.....##..#....#........###.#..#.#...#..##..#..#.#...####.#..\n#.#...###.##.##..#####.##....##.#....#.##....####...###.....##.#.#.###\n#.#..#.###.......#.###..#....###..#...##.###.###..###........#..#.##.#\n.##.#..##..#..##..###.#...#.#.#.#.#.#.##.###.#.##.#######.#.##...#...#\n#.####..###.#.....#........#...###..#..#.#.#.#..#.##....##.#...#...##.\n##..###..###...#..#.######....###.##...##..##.#....#.....##..##..##..#\n##.#....#.##.###..###.######.#..#.#..#.##..#.#....##.#.##..#......###.\n.##..##.#..#.#.##..##..#..#..###....#..#.#.###.#....##.#..###..#.#..##\n..#..########.###.#########.##.#####.....#....#####....#.#...#.#..#.##\n..####...#####.#..###.#.#.###.####.###...##..#..#..##.......###.###..#\n.#.####.#..##.#####.###.#########.#...#...###.###.#.##...##.#####..#.#\n##...#..#..#.##.####....#....##.#.###.#....#.#.....###..#.###.#..#.##.\n.#.##.....#...#...#......#..#.##..###....#.##..###......#..#.####..#.#\n#.##.##.#####.##........####.##.#.###...##..####.#....#.##..##.#####..\n#..#.###.##.####..#..#.##.#.#####..##...#######.#.##.####.#.#.....#.#.\n###........#...#...####...#.############.#...#...#..#.#.#..#.....##.#.\n...##...#...#.##...###..#..###.##....#.###.....####....##..#.#..#..##.\n###...###.####.###..#.#..###.####..#.##..#..#...##.###........#.##..#.'
# TEST_DATA = '.....\n..##.\n..#..\n.....\n..##.\n.....'
if USE_TEST_DATA:
    input_list = TEST_DATA.splitlines()
else:
    input_list = REAL_DATA.splitlines()

ELF = '#'
NOT_ELF = '.'

NORTH = ((0, 1), [(-1, 1), (0, 1), (1, 1)])
SOUTH = ((0, -1), [(-1, -1), (0, -1), (1, -1)])
WEST = ((-1, 0), [(-1, -1), (-1, 0), (-1, 1)])
EAST = ((1, 0), [(1, -1), (1, 0), (1, 1)])
PRIO_LIST = [NORTH, SOUTH, WEST, EAST]
NO_SUGGESTION = -2

class Elf:
    def __init__(self, x, y) -> None:
        self.x = x
        self.y = y
        self.suggested_pos = NO_SUGGESTION
    
    def set_proposal(self, elf_list, prio_list):
        elf_positions = [(elf.x, elf.y) for elf in elf_list]

        for test_dir in prio_list:
            if self.is_dir_okay(elf_positions, test_dir):
                self.suggested_pos = (self.x + test_dir[0][0], self.y + test_dir[0][1])
                return True
        return False

    def has_any_neighbour(self, elf_list):
        # Get neighbour coords list:
        x = self.x
        y = self.y
        neigh_coords = [(x+1, y+0), (x+1, y+1), (x+0, y+1), (x-1, y+1), (x-1, y+0), (x-1, y-1), (x+0, y-1), (x+1, y-1)]

        for other_elf in elf_list:
            if (other_elf.x, other_elf.y) in neigh_coords:
                return True
        return False

    def is_dir_okay(self, elf_list, dir):
        for test_positions in dir[1]:
            x = self.x + test_positions[0]
            y = self.y + test_positions[1]
            if (x, y) in elf_list:
                return False
        return True

    def set_suggested_pos(self):
        self.x = self.suggested_pos[0]
        self.y = self.suggested_pos[1]
        self.suggested_pos = NO_SUGGESTION

def print_elfs(elf_list):
    max_x, min_x, max_y, min_y = get_min_mix_x_y(elf_list)

    elf_positions = [(elf.x, elf.y) for elf in elf_list]

    for y in range(max_y, min_y-1, -1):
        ack_string = ""
        for x in range(min_x, max_x+1):
            ack_string += '#' if (x, y) in elf_positions else '.'
        print(ack_string)


def get_min_mix_x_y(elf_list):
    max_x = max_y = -1e10
    min_x = min_y = 1e10

    for elf in elf_list:
        max_x = max(max_x, elf.x)
        min_x = min(min_x, elf.x)
        max_y = max(max_y, elf.y)
        min_y = min(min_y, elf.y)
    return (max_x, min_x, max_y, min_y)


def part_1(part):
    elf_list = []
    for y_value, row in enumerate(input_list):
        for x_value, char in enumerate(row):
            if char == '#':
                inverse_y_value = -y_value # Positiv y upwards
                elf = Elf(x_value, inverse_y_value)
                elf_list.append(elf)

    for round in range(1000):
        # Set correct prio based on round
        prio_list = deque(PRIO_LIST)
        prio_list.rotate(-round) # check
        prio_list = list(prio_list)

        # Print elf list
        print(round, get_min_mix_x_y(elf_list), len(elf_list))
        # print_elfs(elf_list)

        # Insert all proposals in elf_list
        for elf in elf_list:
            # stand still if no neighbours or no possible move
            elf.suggested_pos = NO_SUGGESTION
            if elf.has_any_neighbour(elf_list):
                elf.set_proposal(elf_list, prio_list)

        someone_moved = False
        for elf in elf_list:
            if elf.suggested_pos == NO_SUGGESTION:
                continue
            # If no other elf has the suggested position, make the move
            make_move = True
            for other_elf in elf_list:
                if other_elf == elf:
                    continue
                if elf.suggested_pos == other_elf.suggested_pos:
                    make_move = False
                    break
            if make_move:
                elf.set_suggested_pos()
                someone_moved = True

        if someone_moved:
            pass
            # Make moves
        else:
            return round+1

    # Calculate the area and substract the number of elves
    max_x, min_x, max_y, min_y = get_min_mix_x_y(elf_list)

    return (max_x - min_x + 1) * (max_y - min_y + 1) - len(elf_list)

print(part_1(1)) # 29243 too high
